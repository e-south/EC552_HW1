from itertools import combinationsimport globfrom celloapi2 import CelloQuery, CelloResultfrom mpl_toolkits.mplot3d import Axes3Dimport pandas as pdfrom mpl_toolkits import mplot3dimport numpy as npimport seaborn as snsimport matplotlib.pyplot as pltdef plot_3dscatter(samples, colorz):    """    Plot *.input.json files (set of distinct circuit parameters) and scores.    :param samples: dataframe with relevant features.    :param labels: array of labeled data points (i.e., chassis)    """    fig = plt.figure()    ax = Axes3D(fig)    # Scaling longitude and latitude in order to avoid arbitrary skewed results    x = list(samples['prom_mod_log'])    y = list(samples['rbs_mod_log'])    z = list(samples['score'])    ax.set_xlabel('Promoter modification [log()]')    ax.set_ylabel('RBS modification [log()]')    ax.set_zlabel('CelloQuery() Score')    ax.scatter(x, y, z, c=colorz)    plt.show()# Produce plots from Figure 1df = pd.read_csv('cello_scores_round_1.csv')# Parameter modifcations in top 10% of CelloQuery() scoresdf2 = df[df['score'] > np.percentile(df['score'], 90)].sort_values(by='score', ascending=False)# df2.to_csv('top_scores_round_1.csv', index=False)colorz = df['score'] > np.percentile(df['score'], 90)mods = []  # Extract promoter/rbs modifications from strings (i.e. file names)for i in range(len(df)):    temp = df['modifications'][i].rstrip('.json').lstrip('new_p+').split('_')    temp[1] = temp[1].lstrip('r+')    temp = [temp[0], temp[1]]    mods.append(temp)# Adding features to DataFramedf['prom_mod'] = [float(ele[0]) for ele in mods]df['rbs_mod'] = [float(ele[1]) for ele in mods]df['prom_mod_log'] = [np.log(float(ele[0])) for ele in mods]df['rbs_mod_log'] = [np.log(float(ele[1])) for ele in mods]# Exploratory data analysisplot_3dscatter(df, colorz)  # compare relationship between score, promoter, and rbsax = sns.distplot(a=df['score'], hist=True, kde=False, rug=True)ax.set(ylabel='Count', title='CelloQuery() Score')plt.axvline(x=289.03, c='red')ax.annotate('90% Percentile', xy=(305, 200))ax.annotate('->', xy=(305, 180))ax.set_xlabel('Distribution of CelloQuery() Scores for Screen 1')# Produce plots from Figure 2df = pd.read_csv('cello_scores_round_2.csv')df = df[df['chassis'] == 'Eco2C1G3T1'] # Isolate observations with EcoR1 chassisdf = df.reset_index()# Cleaning df to remove duplicate and partially filled observationsdf = df.dropna(axis=0, how='any').drop_duplicates()# Parameter modifcations in top 10% of CelloQuery() scoresdf2 = df[df['score'] > np.percentile(df['score'], 90)].sort_values(by='score', ascending=False)# df2.to_csv('top_scores_round_2.csv', index=False)colorz = df['score'] > np.percentile(df['score'], 90)mods = []  # Extract promoter/rbs modifications from strings (i.e. file names)for i in range(len(df)):    temp = df['modifications'][i].rstrip('.json').lstrip('range_p+').split('_')    temp[2] = temp[2].lstrip('r+')    temp = [temp[0], temp[2]]    mods.append(temp)# Find unique signal pairing combinationsunique_pairs = list(set(list(df['signal_pairing'])))# Assign a classifer IDs to each signal pair, which will enable later plottingclassifers = np.empty([len(df), 1]).astype(str)for i in range(len(unique_pairs)):    for row in range(len(df)):        if df.loc[row, 'signal_pairing'] == unique_pairs[i]:            classifers[row] = unique_pairs[i]df['Signal_Pair'] = classifers# Adding features to DataFramedf['prom_mod'] = [float(ele[0]) for ele in mods]df['rbs_mod'] = [float(ele[1]) for ele in mods]df['prom_mod_log'] = [np.log(float(ele[0])) for ele in mods]df['rbs_mod_log'] = [np.log(float(ele[1])) for ele in mods]# Find indices of max value for every signal pair combinationtop_pair_idx = df.groupby(['Signal_Pair'])['score'].transform(max) == df['score']top_pairs = df[top_pair_idx].reset_index().sort_values(by='score')# Bar plotax = sns.barplot(y="signal_pairing", x="score", data=top_pairs)ax.set_ylabel(ylabel='Signal Pairings')ax.set_xlabel(xlabel='CelloQuery() Score')# Distribution of 'score' values for each signal pairfig, ax = plt.subplots()plt.figure(figsize=(6, 3))ax = sns.displot(data=df, x='score', hue='Signal_Pair', kind='kde')ax.set(ylabel='Count', title='Distribution of Scores for Each Signal Pair')plt.axvline(x=289.03, c='red', linestyle='--')plt.axvline(x=399.31, c='blue', linestyle='--')plt.xlabel('CelloQuery() Output Scores in Screening Round 2')plt.ylabel('Frequency')